#1-1: This is constant. By yelling out to the group of 15 people, 
        it is effectively the same as searching for a single in an array.
#1-2: This is linear. You are going through the line of the people, asking one-by-one.

#2: This is constant. When you check each if statement, 
        both are contants so therefore the entire algorithm is one as well.

#3: This is polynomial. Because the algorithm depends on a nested for loop, the function therefore runs as O(n^2).

#4: This is linear. It is dependant on the length of the array.

#5: This is linear. It is dependant on the length of the array.

#6: This is polynomial. Despite there being only one array, the nest for loop makes it polynomial.

#7: This algorithm is effectively running the fibonacci sequence and putting each number into the array until it gets to num.
    The runtime complexity is linear becuase it is dependant on the length of the array which is the input "num."

#8: This is logarithmic or log(n). Regardless the size of the data, it will always be cut in half and then half again until
        a condition is met. Therefore, the complexity grows logarithmically.

#9: This is constant. It only returns a random element in a given array.

#10: This algorithm takes in value and checks to see if that value is a prime number or not. The time complexity here is
        linear because it is dependant number passed in.

#11-1 & 2: see index.js
#11-3: Given 5 discs, at move #7, discs 1, 2, & 3 are at the destination pole while 4 & 5 are still at the start
#11-4: 3 discs take 7 moves, 4 take 15, 5 take 31
#11-5: The runtime is exponential

#12: see index.js